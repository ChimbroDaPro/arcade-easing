<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="A)EL)7mM|R.$iB2)GfI)" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="$x+%qePMJ#Fp|7!o^}+P"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace easing {" line1="" line2="    export enum Mode {" line3="        //% block=&quot;linear&quot;" line4="        Linear = 0," line5="        // Quadratic" line6="        //% block=&quot;quad in&quot;" line7="        InQuad," line8="        //% block=&quot;quad out&quot;" line9="        OutQuad," line10="        //% block=&quot;quad in-out&quot;" line11="        InOutQuad," line12="        // Cubic" line13="        //% block=&quot;cubic in&quot;" line14="        InCubic," line15="        //% block=&quot;cubic out&quot;" line16="        OutCubic," line17="        //% block=&quot;cubic in-out&quot;" line18="        InOutCubic," line19="        // Quart" line20="        //% block=&quot;quart in&quot;" line21="        InQuart," line22="        //% block=&quot;quart out&quot;" line23="        OutQuart," line24="        //% block=&quot;quart in-out&quot;" line25="        InOutQuart," line26="        // Quint" line27="        //% block=&quot;quint in&quot;" line28="        InQuint," line29="        //% block=&quot;quint out&quot;" line30="        OutQuint," line31="        //% block=&quot;quint in-out&quot;" line32="        InOutQuint," line33="        // Sine" line34="        //% block=&quot;sine in&quot;" line35="        InSine," line36="        //% block=&quot;sine out&quot;" line37="        OutSine," line38="        //% block=&quot;sine in-out&quot;" line39="        InOutSine," line40="        // Expo" line41="        //% block=&quot;expo in&quot;" line42="        InExpo," line43="        //% block=&quot;expo out&quot;" line44="        OutExpo," line45="        //% block=&quot;expo in-out&quot;" line46="        InOutExpo," line47="        // Circ" line48="        //% block=&quot;circ in&quot;" line49="        InCirc," line50="        //% block=&quot;circ out&quot;" line51="        OutCirc," line52="        //% block=&quot;circ in-out&quot;" line53="        InOutCirc," line54="        // Back" line55="        //% block=&quot;back in&quot;" line56="        InBack," line57="        //% block=&quot;back out&quot;" line58="        OutBack," line59="        //% block=&quot;back in-out&quot;" line60="        InOutBack," line61="        // Elastic" line62="        //% block=&quot;elastic in&quot;" line63="        InElastic," line64="        //% block=&quot;elastic out&quot;" line65="        OutElastic," line66="        //% block=&quot;elastic in-out&quot;" line67="        InOutElastic," line68="        // Bounce" line69="        //% block=&quot;bounce in&quot;" line70="        InBounce," line71="        //% block=&quot;bounce out&quot;" line72="        OutBounce," line73="        //% block=&quot;bounce in-out&quot;" line74="        InOutBounce" line75="    }" line76="    export enum ReturnKind {" line77="        //% block=&quot;job id&quot;" line78="        JobId = 0," line79="        //% block=&quot;eased value&quot;" line80="        EasedValue" line81="    }" line82="" line83="    const EVT_SRC = 0xE453" line84="" line85="    // ---------- Easing math ----------" line86="    function outBounce(t: number): number {" line87="        const n1 = 7.5625" line88="        const d1 = 2.75" line89="        if (t &lt; 1 / d1) {" line90="            return n1 * t * t" line91="        } else if (t &lt; 2 / d1) {" line92="            t -= 1.5 / d1" line93="            return n1 * t * t + 0.75" line94="        } else if (t &lt; 2.5 / d1) {" line95="            t -= 2.25 / d1" line96="            return n1 * t * t + 0.9375" line97="        } else {" line98="            t -= 2.625 / d1" line99="            return n1 * t * t + 0.984375" line100="        }" line101="    }" line102="" line103="    function applyEase(mode: Mode, t: number): number {" line104="        if (t &lt;= 0) return 0" line105="        if (t &gt;= 1) return 1" line106="" line107="        switch (mode) {" line108="            case Mode.Linear: return t" line109="" line110="            case Mode.InQuad: return t * t" line111="            case Mode.OutQuad: return t * (2 - t)" line112="            case Mode.InOutQuad: return t &lt; 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t" line113="" line114="            case Mode.InCubic: return t * t * t" line115="            case Mode.OutCubic: { const u = t - 1; return u * u * u + 1 }" line116="            case Mode.InOutCubic: return t &lt; 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1" line117="" line118="            case Mode.InQuart: return t * t * t * t" line119="            case Mode.OutQuart: { const v = t - 1; return 1 - v * v * v * v }" line120="            case Mode.InOutQuart: return t &lt; 0.5 ? 8 * t * t * t * t : 1 - 8 * Math.pow(t - 1, 4)" line121="" line122="            case Mode.InQuint: return Math.pow(t, 5)" line123="            case Mode.OutQuint: return 1 + Math.pow(t - 1, 5)" line124="            case Mode.InOutQuint: return t &lt; 0.5 ? 16 * Math.pow(t, 5) : 1 + 16 * Math.pow(t - 1, 5)" line125="" line126="            case Mode.InSine: return 1 - Math.cos((t * Math.PI) / 2)" line127="            case Mode.OutSine: return Math.sin((t * Math.PI) / 2)" line128="            case Mode.InOutSine: return -(Math.cos(Math.PI * t) - 1) / 2" line129="" line130="            case Mode.InExpo: return Math.pow(2, 10 * t - 10)" line131="            case Mode.OutExpo: return 1 - Math.pow(2, -10 * t)" line132="            case Mode.InOutExpo: return t &lt; 0.5 ? Math.pow(2, 20 * t - 10) / 2 : (2 - Math.pow(2, -20 * t + 10)) / 2" line133="" line134="            case Mode.InCirc: return 1 - Math.sqrt(1 - t * t)" line135="            case Mode.OutCirc: { const w = t - 1; return Math.sqrt(1 - w * w) }" line136="            case Mode.InOutCirc: return t &lt; 0.5 ? (1 - Math.sqrt(1 - 4 * t * t)) / 2 : (Math.sqrt(1 - Math.pow(2 * t - 2, 2)) + 1) / 2" line137="" line138="            case Mode.InBack: { const c1 = 1.70158, c3 = c1 + 1; return c3 * t * t * t - c1 * t * t }" line139="            case Mode.OutBack: { const c12 = 1.70158, c32 = c12 + 1; const a = t - 1; return 1 + c32 * a * a * a + c12 * a * a }" line140="            case Mode.InOutBack: {" line141="                const c13 = 1.70158, c2 = c13 * 1.525" line142="                if (t &lt; 0.5) {" line143="                    const b = 2 * t" line144="                    return (b * b * ((c2 + 1) * b - c2)) / 2" line145="                } else {" line146="                    const c = 2 * t - 2" line147="                    return (c * c * ((c2 + 1) * c + c2) + 2) / 2" line148="                }" line149="            }" line150="" line151="            case Mode.InElastic: { const c4 = (2 * Math.PI) / 3; return -Math.pow(2, 10 * t - 10) * Math.sin((t * 10 - 10.75) * c4) }" line152="            case Mode.OutElastic: { const c42 = (2 * Math.PI) / 3; return Math.pow(2, -10 * t) * Math.sin((t * 10 - 0.75) * c42) + 1 }" line153="            case Mode.InOutElastic: {" line154="                const c5 = (2 * Math.PI) / 4.5" line155="                if (t &lt; 0.5) return -(Math.pow(2, 20 * t - 10) * Math.sin((20 * t - 11.125) * c5)) / 2" line156="                return (Math.pow(2, -20 * t + 10) * Math.sin((20 * t - 11.125) * c5)) / 2 + 1" line157="            }" line158="" line159="            case Mode.InBounce: return 1 - outBounce(1 - t)" line160="            case Mode.OutBounce: return outBounce(t)" line161="            case Mode.InOutBounce: return t &lt; 0.5 ? (1 - outBounce(1 - 2 * t)) / 2 : (1 + outBounce(2 * t - 1)) / 2" line162="        }" line163="" line164="        return t" line165="    }" line166="" line167="    // ---------- Job system ----------" line168="    type JobType = &quot;pos&quot; | &quot;scale&quot; | &quot;camera&quot; | &quot;value&quot;" line169="" line170="    class Job {" line171="        id: number" line172="        type: JobType" line173="        sprite: Sprite | null" line174="        // pos" line175="        x0: number" line176="        y0: number" line177="        x1: number" line178="        y1: number" line179="        // scale" line180="        s0: number" line181="        s1: number" line182="        // camera" line183="        cx0: number" line184="        cy0: number" line185="        cx1: number" line186="        cy1: number" line187="        // value" line188="        v0: number" line189="        v1: number" line190="        handler: ((v: number, j: number) =&gt; void) | null" line191="        start: number" line192="        ms: number" line193="        mode: Mode" line194="        done: boolean" line195="        tag: string | null" line196="        progress: number" line197="" line198="        constructor(id: number) {" line199="            this.id = id" line200="            this.type = &quot;pos&quot;" line201="            this.sprite = null" line202="            this.x0 = this.y0 = this.x1 = this.y1 = 0" line203="            this.s0 = this.s1 = 1" line204="            this.cx0 = this.cy0 = this.cx1 = this.cy1 = 0" line205="            this.v0 = this.v1 = 0" line206="            this.handler = null" line207="            this.start = game.runtime()" line208="            this.ms = 1" line209="            this.mode = Mode.InOutQuad" line210="            this.done = false" line211="            this.tag = null" line212="            this.progress = 0" line213="        }" line214="" line215="        update(now: number) {" line216="            if (this.done) return" line217="            const t = Math.min(1, (now - this.start) / this.ms)" line218="            const e = applyEase(this.mode, t)" line219="            this.progress = e" line220="            switch (this.type) {" line221="                case &quot;pos&quot;:" line222="                    if (this.sprite) {" line223="                        this.sprite.x = this.x0 + (this.x1 - this.x0) * e" line224="                        this.sprite.y = this.y0 + (this.y1 - this.y0) * e" line225="                    }" line226="                    break" line227="                case &quot;scale&quot;:" line228="                    if (this.sprite) {" line229="                        try {" line230="                            (this.sprite as any).setScale(this.s0 + (this.s1 - this.s0) * e)" line231="                        } catch (err) {" line232="                        }" line233="                    }" line234="                    break" line235="                case &quot;camera&quot;:" line236="                    scene.cameraShake(0, 0) // noop, just ensure scene exists" line237="                    scene.centerCameraAt(Math.round(this.cx0 + (this.cx1 - this.cx0) * e), Math.round(this.cy0 + (this.cy1 - this.cy0) * e))" line238="                    break" line239="                case &quot;value&quot;:" line240="                    if (this.handler) {" line241="                        const val = this.v0 + (this.v1 - this.v0) * e" line242="                        this.handler(val, this.id)" line243="                    }" line244="                    break" line245="            }" line246="" line247="            if (t &gt;= 1) {" line248="                this.done = true" line249="                // raise sprite-specific event for pos/scale types" line250="                if (this.sprite) {" line251="                    control.raiseEvent(EVT_SRC, this.sprite.id)" line252="                }" line253="            }" line254="        }" line255="    }" line256="" line257="    let jobs: Job[] = []" line258="    let namedValueHandlers: { [name: string]: (v: number, j: number) =&gt; void } = {}" line259="    let nextId = 1" line260="    let runnerStarted = false" line261="" line262="    function ensureRunner() {" line263="        if (runnerStarted) return" line264="        runnerStarted = true" line265="        game.onUpdate(function () {" line266="            if (jobs.length === 0) return" line267="            const now = game.runtime()" line268="            for (let i = jobs.length - 1; i &gt;= 0; i--) {" line269="                jobs[i].update(now)" line270="                if (jobs[i].done) jobs.splice(i, 1)" line271="            }" line272="        })" line273="    }" line274="" line275="    function pushJob(j: Job) {" line276="        jobs.push(j)" line277="        ensureRunner()" line278="    }" line279="" line280="    function getCameraCenter() {" line281="        const camLeft = scene.cameraLeft();" line282="        const camTop = scene.cameraTop();" line283="        const cx = camLeft + scene.screenWidth() / 2;" line284="        const cy = camTop + scene.screenHeight() / 2;" line285="        return { x: cx, y: cy };" line286="    }" line287="" line288="    function findJobsForSprite(s: Sprite): Job[] {" line289="        const out: Job[] = []" line290="        for (let j of jobs) if (j.sprite === s) out.push(j)" line291="        return out" line292="    }" line293="" line294="    // ---------- External Blocks ----------" line295="" line296="    /**" line297="     * Ease a sprite to a target position. Returns a job id." line298="     * Overwrites any existing easing of this sprite (pos/scale) unless you choose to keep multiple." line299="     */" line300="    //% blockId=easing_easeTo" line301="    //% block=&quot;ease %sprite=variables_get(mySprite) to x %x y %y over %ms (ms) using %mode&quot;" line302="    //% inlineInputMode=inline" line303="    //% group=&quot;Move&quot; weight=100" line304="    export function easeTo(sprite: Sprite, x: number, y: number, ms: number, mode: Mode = Mode.InOutQuad): number {" line305="        if (!sprite) return -1" line306="        for (let k = jobs.length - 1; k &gt;= 0; k--) {" line307="            if (jobs[k].sprite === sprite &amp;&amp; jobs[k].type === &quot;pos&quot;) jobs.splice(k, 1)" line308="        }" line309="        const l = new Job(nextId++)" line310="        l.type = &quot;pos&quot;" line311="        l.sprite = sprite" line312="        l.x0 = sprite.x" line313="        l.y0 = sprite.y" line314="        l.x1 = x" line315="        l.y1 = y" line316="        l.start = game.runtime()" line317="        l.ms = Math.max(1, ms | 0)" line318="        l.mode = mode" line319="        pushJob(l)" line320="        return l.id" line321="    }" line322="" line323="    /**" line324="     * Ease a sprite by delta." line325="     */" line326="    //% blockId=easing_easeBy" line327="    //% block=&quot;ease %sprite=variables_get(mySprite) by dx %dx dy %dy over %ms (ms) using %mode&quot;" line328="    //% inlineInputMode=inline" line329="    //% group=&quot;Move&quot; weight=90" line330="    export function easeBy(sprite: Sprite, dx: number, dy: number, ms: number, mode: Mode = Mode.InOutQuad): number {" line331="        if (!sprite) return -1" line332="        return easeTo(sprite, sprite.x + dx, sprite.y + dy, ms, mode)" line333="    }" line334="" line335="    /**" line336="     * Ease the scale of a sprite. If startScale is omitted, 1 is assumed." line337="     * Returns job id." line338="     */" line339="    //% blockId=easing_easeScaleTo" line340="    //% block=&quot;ease scale of %sprite=variables_get(mySprite) to %toScale over %ms (ms) using %mode (start %startScale)&quot;" line341="    //% inlineInputMode=inline" line342="    //% group=&quot;Scale&quot; weight=85" line343="    export function easeScaleTo(sprite: Sprite, toScale: number, ms: number, mode: Mode = Mode.InOutQuad, startScale?: number): number {" line344="        if (!sprite) return -1" line345="        // remove existing scale jobs" line346="        for (let m = jobs.length - 1; m &gt;= 0; m--) {" line347="            if (jobs[m].sprite === sprite &amp;&amp; jobs[m].type === &quot;scale&quot;) jobs.splice(m, 1)" line348="        }" line349="        const n = new Job(nextId++)" line350="        n.type = &quot;scale&quot;" line351="        n.sprite = sprite" line352="        n.s0 = (startScale === undefined) ? 1 : startScale" line353="        n.s1 = toScale" line354="        n.start = game.runtime()" line355="        n.ms = Math.max(1, ms | 0)" line356="        n.mode = mode" line357="        pushJob(n)" line358="        return n.id" line359="    }" line360="" line361="    /**" line362="     * Ease the scale of a sprite by delta (relative)." line363="     * Returns job id." line364="     */" line365="    //% blockId=easing_easeScaleBy" line366="    //% block=&quot;ease scale of %sprite=variables_get(mySprite) by %dScale over %ms (ms) using %mode (start %startScale)&quot;" line367="    //% inlineInputMode=inline" line368="    //% group=&quot;Scale&quot; weight=84" line369="    export function easeScaleBy(sprite: Sprite, dScale: number, ms: number, mode: Mode = Mode.InOutQuad, startScale?: number): number {" line370="        const s0 = (startScale === undefined) ? 1 : startScale" line371="        return easeScaleTo(sprite, s0 + dScale, ms, mode, s0)" line372="    }" line373="" line374="    /**" line375="     * Ease the camera center to a given (x,y). Returns job id." line376="     * NOTE: If camera is following a sprite, it will override manual centering." line377="     */" line378="    //% blockId=easing_easeCameraTo" line379="    //% block=&quot;ease camera to x %x y %y over %ms (ms) using %mode&quot;" line380="    //% inlineInputMode=inline" line381="    //% group=&quot;Camera&quot; weight=80" line382="    export function easeCameraTo(x: number, y: number, ms: number, mode: Mode = Mode.Linear): number {" line383="        const o = new Job(nextId++)" line384="        o.type = &quot;camera&quot;" line385="        // store current center as start (we compute from screen and camera)" line386="        o.cx0 = getCameraCenter().x" line387="        o.cy0 = getCameraCenter().y" line388="        o.cx1 = x" line389="        o.cy1 = y" line390="        o.start = game.runtime()" line391="        o.ms = Math.max(1, ms | 0)" line392="        o.mode = mode" line393="        pushJob(o)" line394="        return o.id" line395="    } " line396="" line397="" line398="    /**" line399="     * Define (register) a named easing function. The handler receives (value, jobId)." line400="     * Use this to store a function that you will launch later." line401="     * @param handler function (value, jobId) to call each frame with the eased value and the job id" line402="     */" line403="    //% blockId=easing_setupEaseFunc" line404="    //% block=&quot;setup easing function named %name with %value %jobId&quot;" line405="    //% draggableParameters=reporter" line406="    //% group=&quot;Generic&quot; weight=77" line407="    export function setupEaseFunc(name: string, handler: (value: number, jobId: number) =&gt; void): void {" line408="        if (!name) return" line409="        if (!handler) return" line410="        namedValueHandlers[name] = handler" line411="    }" line412="" line413="    /**" line414="     * Launch a previously defined easing function (by name), easing value from v0 -&gt; v1." line415="     * The registered handler is called each frame with (value, jobId)." line416="     * This block returns nothing — the handler itself is responsible for using jobId if needed." line417="     */" line418="    //% blockId=easing_launchEaseFunc" line419="    //% block=&quot;launch easing function named %name from %v0 to %v1 over %ms (ms) using %mode&quot;" line420="    //% inlineInputMode=inline" line421="    //% group=&quot;Generic&quot; weight=76" line422="    export function launchEaseFunc(name: string, v0: number, v1: number, ms: number, mode: Mode = Mode.InOutQuad): void {" line423="        const h = namedValueHandlers[name]" line424="        if (!h) {" line425="            return" line426="        }" line427="" line428="        const p = new Job(nextId++)" line429="        p.type = &quot;value&quot;" line430="        p.v0 = v0" line431="        p.v1 = v1" line432="        p.start = game.runtime()" line433="        p.ms = Math.max(1, ms | 0)" line434="        p.mode = mode" line435="        // simply use the registered handler (it expects value, jobId)" line436="        p.handler = h" line437="        pushJob(p)" line438="    }" line439="" line440="    /**" line441="     * Cancel a job by job id." line442="     */" line443="    //% blockId=easing_cancelJob" line444="    //% block=&quot;cancel easing job id %jobId&quot;" line445="    //% group=&quot;Control&quot; weight=70" line446="    export function cancelJob(jobId: number): void {" line447="        for (let q = jobs.length - 1; q &gt;= 0; q--) {" line448="            if (jobs[q].id === jobId) jobs.splice(q, 1)" line449="        }" line450="    }" line451="" line452="    /**" line453="     * Cancel easing on a sprite (any job type attached to the sprite)." line454="     */" line455="    //% blockId=easing_cancelSprite" line456="    //% block=&quot;cancel easing on %sprite=variables_get(mySprite)&quot;" line457="    //% group=&quot;Control&quot; weight=75" line458="    export function cancel(sprite: Sprite): void {" line459="        if (!sprite) return" line460="        for (let r = jobs.length - 1; r &gt;= 0; r--) {" line461="            if (jobs[r].sprite === sprite) jobs.splice(r, 1)" line462="        }" line463="    }" line464="" line465="    /**" line466="     * Cancel by tag (useful if you tag job(s) when creating)." line467="     */" line468="    //% blockId=easing_cancelTag" line469="    //% block=&quot;cancel easings tagged %tag&quot;" line470="    //% group=&quot;Control&quot; weight=69" line471="    export function cancelTag(tag: string): void {" line472="        if (!tag) return" line473="        for (let s = jobs.length - 1; s &gt;= 0; s--) {" line474="            if (jobs[s].tag === tag) jobs.splice(s, 1)" line475="        }" line476="    }" line477="" line478="    /**" line479="     * Cancel all easings." line480="     */" line481="    //% blockId=easing_cancelAll" line482="    //% block=&quot;cancel all easings&quot;" line483="    //% group=&quot;Control&quot; weight=60" line484="    export function cancelAll(): void {" line485="        jobs = []" line486="    }" line487="" line488="    /**" line489="     * Set a tag on a job (for later cancellation). Use the returned job id from creation." line490="     */" line491="    //% blockId=easing_setTag" line492="    //% block=&quot;tag job id %jobId as %tag&quot;" line493="    //% group=&quot;Control&quot; weight=58" line494="    export function setJobTag(jobId: number, tag: string): void {" line495="        for (let d of jobs) if (d.id === jobId) d.tag = tag" line496="    }" line497="" line498="    /**" line499="     * Query if a sprite has any active easing jobs." line500="     */" line501="    //% blockId=easing_isEasing" line502="    //% block=&quot;is %sprite=variables_get(mySprite) easing?&quot;" line503="    //% group=&quot;Control&quot; weight=56" line504="    export function isEasing(sprite: Sprite): boolean {" line505="        for (let f of jobs) if (f.sprite === sprite &amp;&amp; !f.done) return true" line506="        return false" line507="    }" line508="" line509="    /**" line510="     * Get easing progress (0..1) for a sprite. If not easing, returns -1." line511="     */" line512="    //% blockId=easing_getProgressForSprite" line513="    //% block=&quot;easing progress of %sprite=variables_get(mySprite)&quot;" line514="    //% group=&quot;Control&quot; weight=54" line515="    export function getEaseProgress(sprite: Sprite): number {" line516="        for (let g of jobs) {" line517="            if (g.sprite === sprite &amp;&amp; !g.done) return g.progress" line518="        }" line519="        return -1" line520="    }" line521="" line522="    /**" line523="     * Get easing progress for a job id. Returns -1 if not found." line524="     */" line525="    //% blockId=easing_getProgressForId" line526="    //% block=&quot;easing progress of job id %jobId&quot;" line527="    //% group=&quot;Control&quot; weight=53" line528="    export function getEaseProgressById(jobId: number): number {" line529="        for (let j2 of jobs) if (j2.id === jobId) return j2.progress" line530="        return -1" line531="    }" line532="" line533="    /**" line534="     * Event: on easing finished for sprite." line535="     */" line536="    //% blockId=easing_onFinished" line537="    //% block=&quot;on easing finished for %sprite=variables_get(mySprite)&quot;" line538="    //% draggableParameters=reporter" line539="    //% group=&quot;Events&quot; weight=50 blockAllowMultiple=1" line540="    export function onFinished(sprite: Sprite, handler: (s: Sprite) =&gt; void): void {" line541="        control.onEvent(EVT_SRC, sprite.id, function () {" line542="            handler(sprite)" line543="        })" line544="    }" line545="" line546="    // ---------- Backwards compatibility helpers ----------" line547="    /**" line548="     * Convenience: easeTo but returns void (compat) — kept for older projects" line549="     */" line550="    //% blockHidden=true" line551="    export function easeToVoid(sprite: Sprite, x: number, y: number, ms: number, mode: Mode = Mode.InOutQuad): void {" line552="        easeTo(sprite, x, y, ms, mode)" line553="    }" line554="}" numlines="555"></mutation></block></statement></block></xml>