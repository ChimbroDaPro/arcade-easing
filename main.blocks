<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="fK,tm@YApgD{Ox4_rCi)" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="a!0Y%^p:QV7k.oEr/*+["><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace easing {" line1="" line2="    // Internal: single event source for completion notifications" line3="    const EVT_SRC = 0xE453; // arbitrary unique number" line4="" line5="    // Easing modes exposed in the dropdown" line6="    export enum Mode {" line7="        //% block=&quot;linear&quot;" line8="        Linear = 0," line9="" line10="        //% block=&quot;quad in&quot;" line11="        InQuad," line12="        //% block=&quot;quad out&quot;" line13="        OutQuad," line14="        //% block=&quot;quad in-out&quot;" line15="        InOutQuad," line16="" line17="        //% block=&quot;cubic in&quot;" line18="        InCubic," line19="        //% block=&quot;cubic out&quot;" line20="        OutCubic," line21="        //% block=&quot;cubic in-out&quot;" line22="        InOutCubic," line23="" line24="        //% block=&quot;quart in&quot;" line25="        InQuart," line26="        //% block=&quot;quart out&quot;" line27="        OutQuart," line28="        //% block=&quot;quart in-out&quot;" line29="        InOutQuart," line30="" line31="        //% block=&quot;quint in&quot;" line32="        InQuint," line33="        //% block=&quot;quint out&quot;" line34="        OutQuint," line35="        //% block=&quot;quint in-out&quot;" line36="        InOutQuint," line37="" line38="        //% block=&quot;sine in&quot;" line39="        InSine," line40="        //% block=&quot;sine out&quot;" line41="        OutSine," line42="        //% block=&quot;sine in-out&quot;" line43="        InOutSine," line44="" line45="        //% block=&quot;expo in&quot;" line46="        InExpo," line47="        //% block=&quot;expo out&quot;" line48="        OutExpo," line49="        //% block=&quot;expo in-out&quot;" line50="        InOutExpo," line51="" line52="        //% block=&quot;circ in&quot;" line53="        InCirc," line54="        //% block=&quot;circ out&quot;" line55="        OutCirc," line56="        //% block=&quot;circ in-out&quot;" line57="        InOutCirc," line58="" line59="        //% block=&quot;back in&quot;" line60="        InBack," line61="        //% block=&quot;back out&quot;" line62="        OutBack," line63="        //% block=&quot;back in-out&quot;" line64="        InOutBack," line65="" line66="        //% block=&quot;elastic in&quot;" line67="        InElastic," line68="        //% block=&quot;elastic out&quot;" line69="        OutElastic," line70="        //% block=&quot;elastic in-out&quot;" line71="        InOutElastic," line72="" line73="        //% block=&quot;bounce in&quot;" line74="        InBounce," line75="        //% block=&quot;bounce out&quot;" line76="        OutBounce," line77="        //% block=&quot;bounce in-out&quot;" line78="        InOutBounce" line79="    }" line80="" line81="    // ===== Internal easing math =====" line82="" line83="    function applyEase(mode: Mode, t: number): number {" line84="        if (t &lt;= 0) return 0" line85="        if (t &gt;= 1) return 1" line86="" line87="        switch (mode) {" line88="            case Mode.Linear: return t" line89="" line90="            // QUAD" line91="            case Mode.InQuad: return t * t" line92="            case Mode.OutQuad: return t * (2 - t)" line93="            case Mode.InOutQuad: return t &lt; 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t" line94="" line95="            // CUBIC" line96="            case Mode.InCubic: return t * t * t" line97="            case Mode.OutCubic: {" line98="                const u = t - 1" line99="                return u * u * u + 1" line100="            }" line101="            case Mode.InOutCubic: return t &lt; 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1" line102="" line103="            // QUART" line104="            case Mode.InQuart: return t * t * t * t" line105="            case Mode.OutQuart: {" line106="                const v = t - 1" line107="                return 1 - v * v * v * v" line108="            }" line109="            case Mode.InOutQuart: return t &lt; 0.5 ? 8 * t * t * t * t : 1 - 8 * Math.pow(t - 1, 4)" line110="" line111="            // QUINT" line112="            case Mode.InQuint: return Math.pow(t, 5)" line113="            case Mode.OutQuint: return 1 + Math.pow(t - 1, 5)" line114="            case Mode.InOutQuint: return t &lt; 0.5 ? 16 * Math.pow(t, 5) : 1 + 16 * Math.pow(t - 1, 5)" line115="" line116="            // SINE" line117="            case Mode.InSine: return 1 - Math.cos((t * Math.PI) / 2)" line118="            case Mode.OutSine: return Math.sin((t * Math.PI) / 2)" line119="            case Mode.InOutSine: return -(Math.cos(Math.PI * t) - 1) / 2" line120="" line121="            // EXPO" line122="            case Mode.InExpo: return Math.pow(2, 10 * t - 10)" line123="            case Mode.OutExpo: return 1 - Math.pow(2, -10 * t)" line124="            case Mode.InOutExpo:" line125="                return t &lt; 0.5" line126="                    ? Math.pow(2, 20 * t - 10) / 2" line127="                    : (2 - Math.pow(2, -20 * t + 10)) / 2" line128="" line129="            // CIRC" line130="            case Mode.InCirc: return 1 - Math.sqrt(1 - t * t)" line131="            case Mode.OutCirc: {" line132="                const w = t - 1" line133="                return Math.sqrt(1 - w * w)" line134="            }" line135="            case Mode.InOutCirc:" line136="                return t &lt; 0.5" line137="                    ? (1 - Math.sqrt(1 - 4 * t * t)) / 2" line138="                    : (Math.sqrt(1 - Math.pow(2 * t - 2, 2)) + 1) / 2" line139="" line140="            // BACK" line141="            case Mode.InBack: {" line142="                const c1 = 1.70158, c3 = c1 + 1" line143="                return c3 * t * t * t - c1 * t * t" line144="            }" line145="            case Mode.OutBack: {" line146="                const c12 = 1.70158, c32 = c12 + 1" line147="                const a = t - 1" line148="                return 1 + c32 * a * a * a + c12 * a * a" line149="            }" line150="            case Mode.InOutBack: {" line151="                const c13 = 1.70158, c2 = c13 * 1.525" line152="                if (t &lt; 0.5) {" line153="                    const b = 2 * t" line154="                    return (b * b * ((c2 + 1) * b - c2)) / 2" line155="                } else {" line156="                    const c = 2 * t - 2" line157="                    return (c * c * ((c2 + 1) * c + c2) + 2) / 2" line158="                }" line159="            }" line160="" line161="            // ELASTIC" line162="            case Mode.InElastic: {" line163="                const c4 = (2 * Math.PI) / 3" line164="                return -Math.pow(2, 10 * t - 10) * Math.sin((t * 10 - 10.75) * c4)" line165="            }" line166="            case Mode.OutElastic: {" line167="                const c42 = (2 * Math.PI) / 3" line168="                return Math.pow(2, -10 * t) * Math.sin((t * 10 - 0.75) * c42) + 1" line169="            }" line170="            case Mode.InOutElastic: {" line171="                const c5 = (2 * Math.PI) / 4.5" line172="                if (t &lt; 0.5) return -(Math.pow(2, 20 * t - 10) * Math.sin((20 * t - 11.125) * c5)) / 2" line173="                return (Math.pow(2, -20 * t + 10) * Math.sin((20 * t - 11.125) * c5)) / 2 + 1" line174="            }" line175="" line176="            // BOUNCE" line177="            case Mode.InBounce: return 1 - outBounce(1 - t)" line178="            case Mode.OutBounce: return outBounce(t)" line179="            case Mode.InOutBounce:" line180="                return t &lt; 0.5" line181="                    ? (1 - outBounce(1 - 2 * t)) / 2" line182="                    : (1 + outBounce(2 * t - 1)) / 2" line183="        }" line184="        return t" line185="    }" line186="" line187="    function outBounce(t: number): number {" line188="        const n1 = 7.5625" line189="        const d1 = 2.75" line190="        if (t &lt; 1 / d1) {" line191="            return n1 * t * t" line192="        } else if (t &lt; 2 / d1) {" line193="            t -= 1.5 / d1" line194="            return n1 * t * t + 0.75" line195="        } else if (t &lt; 2.5 / d1) {" line196="            t -= 2.25 / d1" line197="            return n1 * t * t + 0.9375" line198="        } else {" line199="            t -= 2.625 / d1" line200="            return n1 * t * t + 0.984375" line201="        }" line202="    }" line203="" line204="    // ===== Job system =====" line205="" line206="    class Job {" line207="        sprite: Sprite" line208="        x0: number" line209="        y0: number" line210="        x1: number" line211="        y1: number" line212="        start: number" line213="        ms: number" line214="        mode: Mode" line215="        done: boolean" line216="" line217="        constructor(sprite: Sprite, x1: number, y1: number, ms: number, mode: Mode) {" line218="            this.sprite = sprite" line219="            this.x0 = sprite.x" line220="            this.y0 = sprite.y" line221="            this.x1 = x1" line222="            this.y1 = y1" line223="            this.start = game.runtime()" line224="            this.ms = Math.max(1, ms | 0)" line225="            this.mode = mode" line226="            this.done = false" line227="        }" line228="" line229="        update(now: number) {" line230="            if (this.done) return" line231="            if (!this.sprite) { this.done = true; return }" line232="" line233="            const t = Math.min(1, (now - this.start) / this.ms)" line234="            const e = applyEase(this.mode, t)" line235="            this.sprite.x = this.x0 + (this.x1 - this.x0) * e" line236="            this.sprite.y = this.y0 + (this.y1 - this.y0) * e" line237="" line238="            if (t &gt;= 1) {" line239="                this.done = true" line240="                control.raiseEvent(EVT_SRC, this.sprite.id) // finished event for this sprite" line241="            }" line242="        }" line243="    }" line244="" line245="    let jobs: Job[] = []" line246="    let runnerStarted = false" line247="" line248="    function ensureRunner() {" line249="        if (runnerStarted) return" line250="        runnerStarted = true" line251="        game.onUpdate(function () {" line252="            if (jobs.length === 0) return" line253="            const now = game.runtime()" line254="            for (let i = jobs.length - 1; i &gt;= 0; i--) {" line255="                const j = jobs[i]" line256="                j.update(now)" line257="                if (j.done) jobs.splice(i, 1)" line258="            }" line259="        })" line260="    }" line261="" line262="    function cancelInternal(sprite: Sprite) {" line263="        if (!sprite) return" line264="        for (let k = jobs.length - 1; k &gt;= 0; k--) {" line265="            if (jobs[k].sprite === sprite) {" line266="                jobs.splice(k, 1)" line267="            }" line268="        }" line269="    }" line270="" line271="    function hasJob(sprite: Sprite): boolean {" line272="        for (let l of jobs) if (l.sprite === sprite) return true" line273="        return false" line274="    }" line275="" line276="    // ===== Public Blocks =====" line277="" line278="    /**" line279="     * Ease a sprite to a target position over time using the selected easing curve." line280="     * Overwrites any existing easing on that sprite." line281="     * @param sprite sprite to move" line282="     * @param x target x" line283="     * @param y target y" line284="     * @param ms duration in milliseconds" line285="     * @param mode easing mode" line286="     */" line287="    //% blockId=easing_easeTo" line288="    //% block=&quot;ease %sprite=variables_get(mySprite) to x %x y %y over %ms (ms) using %mode&quot;" line289="    //% inlineInputMode=inline" line290="    //% group=&quot;Move&quot; weight=100" line291="    export function easeTo(sprite: Sprite, x: number, y: number, ms: number, mode: Mode = Mode.InOutQuad): void {" line292="        ensureRunner()" line293="        cancelInternal(sprite)" line294="        jobs.push(new Job(sprite, x, y, ms, mode))" line295="    }" line296="" line297="    /**" line298="     * Ease a sprite by a delta (relative movement)." line299="     */" line300="    //% blockId=easing_easeBy" line301="    //% block=&quot;ease %sprite=variables_get(mySprite) by dx %dx dy %dy over %ms (ms) using %mode&quot;" line302="    //% inlineInputMode=inline" line303="    //% group=&quot;Move&quot; weight=90" line304="    export function easeBy(sprite: Sprite, dx: number, dy: number, ms: number, mode: Mode = Mode.InOutQuad): void {" line305="        ensureRunner()" line306="        cancelInternal(sprite)" line307="        jobs.push(new Job(sprite, sprite.x + dx, sprite.y + dy, ms, mode))" line308="    }" line309="" line310="    /**" line311="     * Cancel easing on a sprite (leaves it where it is)." line312="     */" line313="    //% blockId=easing_cancel" line314="    //% block=&quot;cancel easing on %sprite=variables_get(mySprite)&quot;" line315="    //% group=&quot;Control&quot; weight=80" line316="    export function cancel(sprite: Sprite): void {" line317="        cancelInternal(sprite)" line318="    }" line319="" line320="    /**" line321="     * Cancel all easings (every sprite)." line322="     */" line323="    //% blockId=easing_cancelAll" line324="    //% block=&quot;cancel all easings&quot;" line325="    //% group=&quot;Control&quot; weight=70" line326="    export function cancelAll(): void {" line327="        jobs = []" line328="    }" line329="" line330="    /**" line331="     * Check if a sprite is currently easing." line332="     */" line333="    //% blockId=easing_isEasing" line334="    //% block=&quot;is %sprite=variables_get(mySprite) easing?&quot;" line335="    //% group=&quot;Control&quot; weight=60" line336="    export function isEasing(sprite: Sprite): boolean {" line337="        return hasJob(sprite)" line338="    }" line339="}" numlines="340"></mutation></block></statement></block></xml>